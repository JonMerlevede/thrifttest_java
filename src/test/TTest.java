/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;

public class TTest implements org.apache.thrift.TBase<TTest, TTest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTest");

  private static final org.apache.thrift.protocol.TField MEKKER_FIELD_DESC = new org.apache.thrift.protocol.TField("mekker", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfTimes", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTestTupleSchemeFactory());
  }

  public String mekker; // required
  public int numberOfTimes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEKKER((short)10, "mekker"),
    NUMBER_OF_TIMES((short)20, "numberOfTimes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // MEKKER
          return MEKKER;
        case 20: // NUMBER_OF_TIMES
          return NUMBER_OF_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBEROFTIMES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEKKER, new org.apache.thrift.meta_data.FieldMetaData("mekker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER_OF_TIMES, new org.apache.thrift.meta_data.FieldMetaData("numberOfTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTest.class, metaDataMap);
  }

  public TTest() {
  }

  public TTest(
    String mekker,
    int numberOfTimes)
  {
    this();
    this.mekker = mekker;
    this.numberOfTimes = numberOfTimes;
    setNumberOfTimesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTest(TTest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMekker()) {
      this.mekker = other.mekker;
    }
    this.numberOfTimes = other.numberOfTimes;
  }

  public TTest deepCopy() {
    return new TTest(this);
  }

  @Override
  public void clear() {
    this.mekker = null;
    setNumberOfTimesIsSet(false);
    this.numberOfTimes = 0;
  }

  public String getMekker() {
    return this.mekker;
  }

  public TTest setMekker(String mekker) {
    this.mekker = mekker;
    return this;
  }

  public void unsetMekker() {
    this.mekker = null;
  }

  /** Returns true if field mekker is set (has been assigned a value) and false otherwise */
  public boolean isSetMekker() {
    return this.mekker != null;
  }

  public void setMekkerIsSet(boolean value) {
    if (!value) {
      this.mekker = null;
    }
  }

  public int getNumberOfTimes() {
    return this.numberOfTimes;
  }

  public TTest setNumberOfTimes(int numberOfTimes) {
    this.numberOfTimes = numberOfTimes;
    setNumberOfTimesIsSet(true);
    return this;
  }

  public void unsetNumberOfTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFTIMES_ISSET_ID);
  }

  /** Returns true if field numberOfTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFTIMES_ISSET_ID);
  }

  public void setNumberOfTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFTIMES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEKKER:
      if (value == null) {
        unsetMekker();
      } else {
        setMekker((String)value);
      }
      break;

    case NUMBER_OF_TIMES:
      if (value == null) {
        unsetNumberOfTimes();
      } else {
        setNumberOfTimes((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEKKER:
      return getMekker();

    case NUMBER_OF_TIMES:
      return Integer.valueOf(getNumberOfTimes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEKKER:
      return isSetMekker();
    case NUMBER_OF_TIMES:
      return isSetNumberOfTimes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTest)
      return this.equals((TTest)that);
    return false;
  }

  public boolean equals(TTest that) {
    if (that == null)
      return false;

    boolean this_present_mekker = true && this.isSetMekker();
    boolean that_present_mekker = true && that.isSetMekker();
    if (this_present_mekker || that_present_mekker) {
      if (!(this_present_mekker && that_present_mekker))
        return false;
      if (!this.mekker.equals(that.mekker))
        return false;
    }

    boolean this_present_numberOfTimes = true;
    boolean that_present_numberOfTimes = true;
    if (this_present_numberOfTimes || that_present_numberOfTimes) {
      if (!(this_present_numberOfTimes && that_present_numberOfTimes))
        return false;
      if (this.numberOfTimes != that.numberOfTimes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TTest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTest typedOther = (TTest)other;

    lastComparison = Boolean.valueOf(isSetMekker()).compareTo(typedOther.isSetMekker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMekker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mekker, typedOther.mekker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfTimes()).compareTo(typedOther.isSetNumberOfTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfTimes, typedOther.numberOfTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTest(");
    boolean first = true;

    sb.append("mekker:");
    if (this.mekker == null) {
      sb.append("null");
    } else {
      sb.append(this.mekker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfTimes:");
    sb.append(this.numberOfTimes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mekker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mekker' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numberOfTimes' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTestStandardSchemeFactory implements SchemeFactory {
    public TTestStandardScheme getScheme() {
      return new TTestStandardScheme();
    }
  }

  private static class TTestStandardScheme extends StandardScheme<TTest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // MEKKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mekker = iprot.readString();
              struct.setMekkerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NUMBER_OF_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfTimes = iprot.readI32();
              struct.setNumberOfTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumberOfTimes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfTimes' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mekker != null) {
        oprot.writeFieldBegin(MEKKER_FIELD_DESC);
        oprot.writeString(struct.mekker);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_TIMES_FIELD_DESC);
      oprot.writeI32(struct.numberOfTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTestTupleSchemeFactory implements SchemeFactory {
    public TTestTupleScheme getScheme() {
      return new TTestTupleScheme();
    }
  }

  private static class TTestTupleScheme extends TupleScheme<TTest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.mekker);
      oprot.writeI32(struct.numberOfTimes);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mekker = iprot.readString();
      struct.setMekkerIsSet(true);
      struct.numberOfTimes = iprot.readI32();
      struct.setNumberOfTimesIsSet(true);
    }
  }

}

